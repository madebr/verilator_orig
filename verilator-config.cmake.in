######################################################################
#
# DESCRIPTION: CMake configuration file for Verilator
#
# Include it in your CMakeLists.txt using:
#
#     find_package(verilate)
#
#  This script adds a verilate function.
#
#     add_executable(simulator <your-c-sources>)
#     verilate(simulator SOURCES <your-hdl-sources>)
#
# Copyright 2003-2019 by Wilson Snyder. This program is free software; you can
# redistribute it and/or modify it under the terms of either the GNU
# Lesser General Public License Version 3 or the Perl Artistic License
# Version 2.0.
#
######################################################################

cmake_minimum_required(VERSION 3.8)

#Prefer VERILATOR_ROOT from environment
if (DEFINED ENV{VERILATOR_ROOT})
    set(VERILATOR_ROOT "$ENV{VERILATOR_ROOT}" CACHE PATH "VERILATOR_ROOT")
endif()

set(VERILATOR_ROOT "${CMAKE_CURRENT_LIST_DIR}" CACHE PATH "VERILATOR_ROOT")

find_program(VERILATOR_BIN NAMES verilator_bin verilator_bin.exe
    HINTS ${VERILATOR_ROOT}/bin ENV VERILATOR_ROOT
    NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH)

if (NOT VERILATOR_ROOT)
    message(FATAL_ERROR "VERILATOR_ROOT cannot be detected. Set it to the appropriate directory (e.g. /usr/share/verilator) as an environment variable or CMake define.")
endif()

if (NOT VERILATOR_BIN)
    message(FATAL_ERROR "Cannot find verilator_bin excecutable.")
endif()

set(verilator_FOUND 1)

include(CheckCXXSourceCompiles)
macro(_verilator_check_cxx_libraries LIBRARIES RESVAR)
    # Check whether a particular link option creates a valid executable
    set(_VERILATOR_CHECK_CXX_LINK_OPTIONS_SRC "int main() {return 0;}\n")
    set(CMAKE_REQUIRED_FLAGS)
    set(CMAKE_REQUIRED_DEFINITIONS)
    set(CMAKE_REQUIRED_INCLUDES)
    set(CMAKE_REQUIRED_LINK_OPTIONS)
    set(CMAKE_REQUIRED_LIBRARIES ${LIBRARIES})
    set(CMAKE_REQUIRED_QUIET)
    check_cxx_source_compiles("${_VERILATOR_CHECK_CXX_LINK_OPTIONS_SRC}" "${RESVAR}")
endmacro()

# Check compiler flag support. Skip on MSVC, these are all GCC flags.
if (NOT CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    if (NOT DEFINED VERILATOR_CFLAGS OR NOT DEFINED VERILATOR_MT_CFLAGS)
        include(CheckCXXCompilerFlag)
        foreach (FLAG @VERILATE_FLAGS_UNCHECKED@)
            string(MAKE_C_IDENTIFIER ${FLAG} FLAGNAME)
            check_cxx_compiler_flag(${FLAG} ${FLAGNAME})
            if (${FLAGNAME})
                list(APPEND VERILATOR_CFLAGS ${FLAG})
            endif()
        endforeach()
        foreach (FLAG @VERILATE_THREADS_UNCHECKED@)
            string(MAKE_C_IDENTIFIER ${FLAG} FLAGNAME)
            _verilator_check_cxx_libraries("${FLAG}" ${FLAGNAME})
            if (${FLAGNAME})
                list(APPEND VERILATOR_MT_CFLAGS ${FLAG})
            endif()
        endforeach()
    endif()
endif()

define_property(TARGET
    PROPERTY VERILATOR_COVERAGE
    BRIEF_DOCS "Verilator coverage enabled"
    FULL_DOCS "Verilator coverage enabled"
)

define_property(TARGET
    PROPERTY VERILATOR_TRACE
    BRIEF_DOCS "Verilator trace enabled"
    FULL_DOCS "Verilator trace enabled"
)

define_property(TARGET
    PROPERTY VERILATOR_SYSTEMC
    BRIEF_DOCS "Verilator systemc enabled"
    FULL_DOCS "Verilator systemc enabled"
)

define_property(TARGET
    PROPERTY VERILATOR_THREADED
    BRIEF_DOCS "Verilator multithreading enabled"
    FULL_DOCS "Verilator multithreading enabled"
)

function(verilate TARGET)
    cmake_parse_arguments(VERILATE "MAIN;COVERAGE;TRACE;SYSTEMC" "PREFIX;TOP_MODULE;THREADS" "SOURCES;VERILATOR_ARGS;INCLUDE_DIRS;OPT_SLOW;OPT_FAST" ${ARGN})
    if (NOT VERILATE_SOURCES)
        message(FATAL_ERROR "Need at least one source")
    endif()

    if (NOT VERILATE_PREFIX)
        list(GET VERILATE_SOURCES 0 TOPSRC)
        get_filename_component(_SRC_NAME ${TOPSRC} NAME_WE)
        set(VERILATE_PREFIX V${_SRC_NAME})
    endif()

    if (VERILATE_TOP_MODULE)
        list(APPEND VERILATOR_ARGS --top-module ${VERILATE_TOP_MODULE})
    endif()

    if (VERILATE_THREADS)
        list(APPEND VERILATOR_ARGS --threads ${VERILATE_THREADS})
    endif()

    if (VERILATE_COVERAGE)
        list(APPEND VERILATOR_ARGS --coverage)
    endif()

    if (VERILATE_TRACE)
        list(APPEND VERILATOR_ARGS --trace)
    endif()

    if (VERILATE_SYSTEMC)
        list(APPEND VERILATOR_ARGS --sc)
    else()
        list(APPEND VERILATOR_ARGS --cc)
    endif()

    if (VERILATE_MAIN)
        list(APPEND VERILATOR_SOURCES "${VERILATOR_ROOT}/include/verilated.cpp")
    endif()

    foreach(INC ${VERILATE_INCLUDE_DIRS})
        list(APPEND VERILATOR_ARGS -y "${INC}")
    endforeach()

    string(TOLOWER ${CMAKE_CXX_COMPILER_ID} COMPILER)
    if (NOT COMPILER MATCHES "msvc|clang")
        set(COMPILER gcc)
    endif()

    set(VDIR "${CMAKE_CURRENT_BINARY_DIR}/${VERILATE_PREFIX}.dir")
    file(MAKE_DIRECTORY ${VDIR})

    set(VERILATOR_COMMAND "${VERILATOR_BIN}" -Wall -Wno-fatal --compiler ${COMPILER} --prefix ${VERILATE_PREFIX} --Mdir ${VDIR} --make cmake ${VERILATOR_ARGS} ${VERILATE_VERILATOR_ARGS} ${VERILATE_SOURCES})

    set(VCMAKE "${VDIR}/${VERILATE_PREFIX}.cmake")
    set(VCMAKE_COPY "${VDIR}/${VERILATE_PREFIX}_copy.cmake")
    if (NOT EXISTS VCMAKE)
        execute_process(
            COMMAND ${VERILATOR_COMMAND}
            WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
            RESULT_VARIABLE _VERILATOR_RC
            OUTPUT_VARIABLE _VERILATOR_OUTPUT
            ERROR_VARIABLE _VERILATOR_OUTPUT)
        if (_VERILATOR_RC)
            string(REPLACE ";" " " VERILATOR_COMMAND_READABLE "${VERILATOR_COMMAND}")
            message("Verilator command: \"${VERILATOR_COMMAND_READABLE}\"")
            message("Output:\n${_VERILATOR_OUTPUT}")
            message(FATAL_ERROR "Verilator command failed (return code=${_VERILATOR_RC})")
        endif()
        execute_process(COMMAND "${CMAKE_COMMAND}" -E copy "${VCMAKE}" "${VCMAKE_COPY}")
    endif()

    include("${VCMAKE_COPY}")

    set(C_OUTPUTS ${${VERILATE_PREFIX}_CLASSES_FAST} ${${VERILATE_PREFIX}_CLASSES_SLOW} ${${VERILATE_PREFIX}_SUPPORT_FAST} ${${VERILATE_PREFIX}_SUPPORT_SLOW})
    foreach(C_OUTPUT ${C_OUTPUTS})
        get_filename_component(C_OUTPUT_NAME_WE "${C_OUTPUT}" NAME_WE)
        list(APPEND H_OUTPUTS "${VDIR}/${C_OUTPUT_NAME_WE}.h")
    endforeach()
    set(OUTPUTS ${C_OUTPUTS} ${H_OUTPUTS})

    add_custom_command(OUTPUT ${OUTPUTS} ${VCMAKE}
                       COMMAND ${VERILATOR_COMMAND}
                       WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
                       DEPENDS ${${VERILATE_PREFIX}_DEPS} VERBATIM)
    # Reconfigure if file list has changed (check contents rather than modified time to avoid unnecessary reconfiguration)
    add_custom_command(OUTPUT ${VCMAKE_COPY}
                       COMMAND ${CMAKE_COMMAND} -E copy_if_different "${VCMAKE}" "${VCMAKE_COPY}"
                       DEPENDS ${VCMAKE})

    if (${VERILATE_PREFIX}_COVERAGE)
        #If any verilate() call specifies --coverage, define VM_COVERAGE in the final build
        set_property(TARGET ${TARGET} PROPERTY VERILATOR_COVERAGE ON)
    endif()
    get_property(_PROP TARGET ${TARGET} PROPERTY VERILATOR_COVERAGE SET)

    if (${VERILATE_PREFIX}_TRACE)
        #If any verilate() call specifies --trace, define VM_TRACE in the final build
        set_property(TARGET ${TARGET} PROPERTY VERILATOR_TRACE ON)
    endif()
    get_property(_PROP TARGET ${TARGET} PROPERTY VERILATOR_TRACE SET)

    if (VM_SC)
        #If any verilate() call specifies --sc, define VM_SC in the final build
        set_property(TARGET ${TARGET} PROPERTY VERILATOR_SYSTEMC ON)
    endif()
    get_property(_PROP TARGET ${TARGET} PROPERTY VERILATOR_SYSTEMC SET)

    if (${VERILATE_PREFIX}_THREADS)
        #If any verilate() call specifies --threads, define VM_THREADED in the final build
        set_property(TARGET ${TARGET} PROPERTY VERILATOR_THREADED ON)
    endif()
    get_property(_PROP TARGET ${TARGET} PROPERTY VERILATOR_THREADED SET)

    target_sources(${TARGET} PRIVATE ${OUTPUTS} ${${VERILATE_PREFIX}_GLOBAL})
    foreach(_VSOURCE ${VERILATE_SOURCES})
        get_filename_component(_VSOURCE "${_VSOURCE}" ABSOLUTE BASE_DIR)
        list(APPEND VSOURCES "${_VSOURCE}")
    endforeach()
    target_sources(${TARGET} PRIVATE ${VSOURCES})

    # Add the compile flags only on Verilated sources
    foreach(C_SOURCE ${C_OUTPUTS} ${${VERILATE_PREFIX}_GLOBAL})
        string(REPLACE ";" " " _CFLAGS "${VERILATOR_CFLAGS};${VM_USER_CFLAGS}")
        set_property(SOURCE "${C_SOURCE}" APPEND PROPERTY COMPILE_FLAGS "${_CFLAGS}")
    endforeach()
    foreach(VSLOW ${${VERILATE_PREFIX}_CLASSES_SLOW} ${${VERILATE_PREFIX}_SUPPORT_SLOW})
        set_property(SOURCE "${VSLOW}" APPEND PROPERTY COMPILE_FLAGS "${VERILATE_OPT_SLOW}")
    endforeach()
    foreach(VFAST ${${VERILATE_PREFIX}_CLASSES_FAST} ${${VERILATE_PREFIX}_SUPPORT_FAST})
        set_property(SOURCE "${VSLOW}" APPEND PROPERTY COMPILE_FLAGS "${VERILATE_OPT_FAST}")
    endforeach()

    target_include_directories(${TARGET} PRIVATE "${VERILATOR_ROOT}/include" "${VERILATOR_ROOT}/include/vltstd" "${VDIR}")
    target_compile_definitions(${TARGET} PRIVATE VL_PRINTF=printf
        VM_COVERAGE=$<BOOL:$<TARGET_PROPERTY:VERILATOR_COVERAGE>>  VM_SC=$<BOOL:$<TARGET_PROPERTY:VERILATOR_SYSTEMC>>
        VM_TRACE=$<BOOL:$<TARGET_PROPERTY:VERILATOR_TRACE>> $<$<BOOL:$<TARGET_PROPERTY:VERILATOR_THREADED>>:VL_THREADED>)

    if (${VERILATE_PREFIX}_THREADS)
        string(REPLACE ";" " " _LDFLAGS "${VERILATOR_MT_CFLAGS};${VM_USER_LDLIBS}")
        set_property(TARGET ${TARGET} APPEND PROPERTY LINK_FLAGS "${_LDFLAGS}")
        target_compile_features(${TARGET} PRIVATE cxx_std_11)
    endif()
endfunction()
