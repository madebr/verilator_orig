$version Generated by VerilatedVcd $end
$date Mon Oct  7 17:45:00 2019
 $end
$timescale   1ns $end

 $scope module Vadd $end
  $var wire  1 $ clk $end
  $var wire  1 ' in1 $end
  $var wire 128 3 in128 [127:0] $end
  $var wire 128 ; in128_2 [255:128] $end
  $var wire  8 M in128_s [7:0] $end
  $var wire 16 + in16 [15:0] $end
  $var wire  8 G in16_s [7:0] $end
  $var wire  1 C in1_s $end
  $var wire 32 - in32 [31:0] $end
  $var wire  8 I in32_s [7:0] $end
  $var wire 64 / in64 [63:0] $end
  $var wire  8 K in64_s [7:0] $end
  $var wire  8 ) in8 [7:0] $end
  $var wire  8 E in8_s [7:0] $end
  $var wire  1 ( out1 $end
  $var wire 128 7 out128 [127:0] $end
  $var wire 128 ? out128_2 [255:128] $end
  $var wire  8 N out128_s [7:0] $end
  $var wire 16 , out16 [15:0] $end
  $var wire  8 H out16_s [7:0] $end
  $var wire  1 D out1_s $end
  $var wire 32 . out32 [31:0] $end
  $var wire  8 J out32_s [7:0] $end
  $var wire 64 1 out64 [63:0] $end
  $var wire  8 L out64_s [7:0] $end
  $var wire  8 * out8 [7:0] $end
  $var wire  8 F out8_s [7:0] $end
  $var wire 32 & result [31:0] $end
  $var wire  1 # rst $end
  $var wire 32 % value [31:0] $end
  $scope module add $end
   $var wire  1 $ clk $end
   $var wire  1 ' in1 $end
   $var wire 128 3 in128 [127:0] $end
   $var wire 128 ; in128_2 [255:128] $end
   $var wire  8 M in128_s [7:0] $end
   $var wire 16 + in16 [15:0] $end
   $var wire  8 G in16_s [7:0] $end
   $var wire  1 C in1_s $end
   $var wire 32 - in32 [31:0] $end
   $var wire  8 I in32_s [7:0] $end
   $var wire 64 / in64 [63:0] $end
   $var wire  8 K in64_s [7:0] $end
   $var wire  8 ) in8 [7:0] $end
   $var wire  8 E in8_s [7:0] $end
   $var wire  1 ( out1 $end
   $var wire 128 7 out128 [127:0] $end
   $var wire 128 ? out128_2 [255:128] $end
   $var wire  8 N out128_s [7:0] $end
   $var wire 16 , out16 [15:0] $end
   $var wire  8 H out16_s [7:0] $end
   $var wire  1 D out1_s $end
   $var wire 32 . out32 [31:0] $end
   $var wire  8 J out32_s [7:0] $end
   $var wire 64 1 out64 [63:0] $end
   $var wire  8 L out64_s [7:0] $end
   $var wire  8 * out8 [7:0] $end
   $var wire  8 F out8_s [7:0] $end
   $var wire 32 & result [31:0] $end
   $var wire  1 # rst $end
   $var wire 32 % value [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
0'
0(
b00000000 )
b00000000 *
b0000000000000000 +
b0000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b0000000000000000000000000000000000000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 1
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 3
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 7
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ?
0C
0D
b00000000 E
b00000000 F
b00000000 G
b00000000 H
b00000000 I
b00000000 J
b00000000 K
b00000000 L
b00000000 M
b00000000 N
#1
0#
b00000000000000000000000000001011 %
#2
b00000000000000000000000000001101 &
#3
b00000000000000000000000000101010 %
#4
b00000000000000000000000000101100 &
